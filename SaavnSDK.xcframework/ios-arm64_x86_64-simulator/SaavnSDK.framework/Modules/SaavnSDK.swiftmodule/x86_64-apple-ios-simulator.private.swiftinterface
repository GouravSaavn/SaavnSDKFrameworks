// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SaavnSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import CoreData
import CoreGraphics
import Foundation
import SDWebImage
@_exported import SaavnSDK
import Starscream
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class JioTuneTrendingViewController : SaavnSDK.ListVC {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func fetchData(forPage thePage: Swift.UInt)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension SaavnSDK.JioTuneTrendingViewController : Starscream.WebSocketDelegate {
  @_Concurrency.MainActor(unsafe) public func websocketDidConnect(socket: Starscream.WebSocketClient)
  @_Concurrency.MainActor(unsafe) public func websocketDidDisconnect(socket: Starscream.WebSocketClient, error: Swift.Error?)
  @_Concurrency.MainActor(unsafe) public func websocketDidReceiveMessage(socket: Starscream.WebSocketClient, text: Swift.String)
  @_Concurrency.MainActor(unsafe) public func websocketDidReceiveData(socket: Starscream.WebSocketClient, data: Foundation.Data)
}
extension SaavnSDK.JioTuneTrendingViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func getScreenName() -> Swift.String!
}
extension SaavnSDK.SongUtil {
  @objc public static func isJioTuneAvailable(_ song: [Swift.String : Any]) -> Swift.Bool
}
extension CoreFoundation.CGFloat {
  public init(_ value: CoreFoundation.CGFloat)
}
public protocol NumberConvertible : Swift.Comparable {
  init(_ value: Swift.Int)
  init(_ value: Swift.Float)
  init(_ value: Swift.Double)
  init(_ value: CoreFoundation.CGFloat)
}
extension SaavnSDK.NumberConvertible {
  public var c: CoreFoundation.CGFloat {
    get
  }
  public var f: Swift.Float {
    get
  }
  public var d: Swift.Double {
    get
  }
  public var i: Swift.Int {
    get
  }
}
extension CoreFoundation.CGFloat : SaavnSDK.NumberConvertible {
}
extension Swift.Double : SaavnSDK.NumberConvertible {
}
extension Swift.Float : SaavnSDK.NumberConvertible {
}
extension Swift.Int : SaavnSDK.NumberConvertible {
}
public func + <T, U, V>(lhs: T, rhs: U) -> V where T : SaavnSDK.NumberConvertible, U : SaavnSDK.NumberConvertible, V : SaavnSDK.NumberConvertible
public func - <T, U, V>(lhs: T, rhs: U) -> V where T : SaavnSDK.NumberConvertible, U : SaavnSDK.NumberConvertible, V : SaavnSDK.NumberConvertible
public func * <T, U, V>(lhs: T, rhs: U) -> V where T : SaavnSDK.NumberConvertible, U : SaavnSDK.NumberConvertible, V : SaavnSDK.NumberConvertible
public func / <T, U, V>(lhs: T, rhs: U) -> V where T : SaavnSDK.NumberConvertible, U : SaavnSDK.NumberConvertible, V : SaavnSDK.NumberConvertible
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class JioTuneAvailableVC : SaavnSDK.SaavnVC_n {
  @objc @_Concurrency.MainActor(unsafe) public init(media: [Swift.String : Any], sectionData: Foundation.NSDictionary?, preloadedImage: UIKit.UIImage?, type: SaavnSDK.ModalViewType, parentVC: SaavnSDK.SaavnVC_n)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateUIMode()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
}
extension SaavnSDK.JioTuneAvailableVC {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension SaavnSDK.JioTuneAvailableVC : UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func interactionControllerForDismissal(using animator: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
}
extension SaavnSDK.JioTuneAvailableVC : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
extension SaavnSDK.JioTuneAvailableVC {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func getScreenName() -> Swift.String!
}
extension UIKit.UIColor {
  @objc convenience dynamic public init?(rgbHex: Swift.String?)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class BufferSlider : SaavnSDK.BaseView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @objc @_Concurrency.MainActor(unsafe) public func setColor(sliderColor: UIKit.UIColor?, bufferColor: UIKit.UIColor?, trackColor: UIKit.UIColor?)
  @objc @_Concurrency.MainActor(unsafe) public func setPlayerProgress(currentProgress: Swift.Double)
  @objc @_Concurrency.MainActor(unsafe) public func setBufferProgress(bufferValue: Swift.Double, duration: Swift.Double)
  @objc @_Concurrency.MainActor(unsafe) public func setThumbImage(normalstate: UIKit.UIImage?, highlightedstate: UIKit.UIImage?)
  @objc @_Concurrency.MainActor(unsafe) public func addTarget(_ target: Any?, action: ObjectiveC.Selector, for controlEvents: UIKit.UIControl.Event)
  @objc @_Concurrency.MainActor(unsafe) public func getvalue() -> Swift.Float
  @objc @_Concurrency.MainActor(unsafe) public func getmaxvalue() -> Swift.Float
  @objc @_Concurrency.MainActor(unsafe) public func setmaxvalue(maxvalue: Swift.Float)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class JioTunesHomeVC : SaavnSDK.SaavnVC_n {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateUIMode()
  @objc deinit
}
extension SaavnSDK.JioTunesHomeVC {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, didEndDisplaying cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
}
extension SaavnSDK.JioTunesHomeVC {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
}
extension SaavnSDK.JioTunesHomeVC {
  @_Concurrency.MainActor(unsafe) public func initNavBarItems()
}
extension SaavnSDK.JioTunesHomeVC {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func getScreenName() -> Swift.String!
}
extension SaavnSDK.JioTunesHomeVC {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func currentJioTuneUpdated(notification: Foundation.Notification)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func removeCurrentJioTuneClicked()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func handleDeactiveResponse(notification: Foundation.Notification)
}
@_inheritsConvenienceInitializers @objc public class MediaUtilSwift : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol PlayerCalloutDelegate {
  @objc func hidePlayerCallout()
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class TagsView : UIKit.UICollectionView {
  @objc deinit
}
extension SaavnSDK.TagsView : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension SaavnSDK.TagsView : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
}
extension SaavnSDK.TagsView : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AlamofireWrapper : ObjectiveC.NSObject {
  @objc public static let sharedInstance: SaavnSDK.AlamofireWrapper
  @objc public func request(method: SaavnSDK.AlamofireWrapper.RequestMethod, URLString: Swift.String, parameters: [Swift.String : ObjectiveC.NSObject]? = nil, useCookies: Swift.Bool = true, allowDataSampling: Swift.Bool = true, acceptableContentType: SaavnSDK.ResponseContentType = ResponseContentTypeDEFAULT, timeoutInterval: Foundation.TimeInterval = -1, headers: [Swift.String : Swift.String]?, downloadProgress: @escaping (_ downloadProgress: Swift.Int64) -> (), success: @escaping (_ response: Foundation.HTTPURLResponse?, _ json: (Any)) -> (), failure: @escaping (_ error: Foundation.NSError?) -> ())
  @objc public func downloadFile(url: Swift.String, fileName: Swift.String, completionBlock: @escaping ((Swift.Bool, Swift.String) -> ()))
  @objc public func cancelAllOperations()
  @objc public enum RequestMethod : ObjectiveC.NSInteger {
    case options = 0, get, head, post, put, patch, delete, trace, connect
    public init?(rawValue: ObjectiveC.NSInteger)
    public typealias RawValue = ObjectiveC.NSInteger
    public var rawValue: ObjectiveC.NSInteger {
      get
    }
  }
  @objc public enum RequestParameterEncoding : ObjectiveC.NSInteger {
    case url, propertyList, json
    public init?(rawValue: ObjectiveC.NSInteger)
    public typealias RawValue = ObjectiveC.NSInteger
    public var rawValue: ObjectiveC.NSInteger {
      get
    }
  }
  @_hasMissingDesignatedInitializers @objc public class BodyPart : ObjectiveC.NSObject {
    @objc deinit
  }
  public typealias AFListener = (SaavnSDK.AlamofireWrapper.AFReachabilityStatus) -> Swift.Void
  @objc public var afListener: SaavnSDK.AlamofireWrapper.AFListener?
  @objc public enum AFReachabilityStatus : ObjectiveC.NSInteger {
    case unknown = -1
    case notReachable = 0
    case reachableViaWAN = 1
    case reachableViaWiFi = 2
    public init?(rawValue: ObjectiveC.NSInteger)
    public typealias RawValue = ObjectiveC.NSInteger
    public var rawValue: ObjectiveC.NSInteger {
      get
    }
  }
  @objc public func startMonitoring()
  @objc public func setReachabilityStatusChangeBlock(_ block: @escaping (_ status: SaavnSDK.AlamofireWrapper.AFReachabilityStatus) -> Swift.Void)
  @objc public func isReachable() -> Swift.Bool
  @objc public func getCurrentReachabilityStatus() -> SaavnSDK.AlamofireWrapper.AFReachabilityStatus
  @objc deinit
}
extension SaavnSDK.VideoPlayerVC {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
}
extension Foundation.NSString {
  @objc dynamic public var nsHtmlDecoded: Foundation.NSString {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class RequestedJioTunesListVC : SaavnSDK.ListVC {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func fetchData(forPage thePage: Swift.UInt)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension SaavnSDK.RequestedJioTunesListVC {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func getScreenName() -> Swift.String!
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class BaseView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BaseTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class SideScrollerMore : SaavnSDK.BaseCollectionViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var data: Foundation.NSDictionary?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct VideoData {
  public enum VideoFolder : Swift.String, Swift.CaseIterable {
    case exploreVC, shortie, unknown
    public init?(rawValue: Swift.String)
    public typealias AllCases = [SaavnSDK.VideoData.VideoFolder]
    public typealias RawValue = Swift.String
    public static var allCases: [SaavnSDK.VideoData.VideoFolder] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers public class CVNVideo : CoreData.NSManagedObject {
  @nonobjc public class func fetchAll() -> CoreData.NSFetchRequest<SaavnSDK.CVNVideo>
  @nonobjc public class func fetchAll(in folder: SaavnSDK.VideoData.VideoFolder) -> CoreData.NSFetchRequest<SaavnSDK.CVNVideo>
  @nonobjc public class func fetch(for urlString: Swift.String) -> CoreData.NSFetchRequest<SaavnSDK.CVNVideo>
  @nonobjc public class func fetchOldest(in folder: SaavnSDK.VideoData.VideoFolder) -> CoreData.NSFetchRequest<SaavnSDK.CVNVideo>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class Translation : ObjectiveC.NSObject, UIKit.UIViewControllerAnimatedTransitioning {
  @_Concurrency.MainActor(unsafe) @objc public func transitionDuration(using transitionContext: UIKit.UIViewControllerContextTransitioning?) -> Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) @objc public func animateTransition(using transitionContext: UIKit.UIViewControllerContextTransitioning)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UISearchBar {
  @_Concurrency.MainActor(unsafe) public var textField: UIKit.UITextField? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var isLoading: Swift.Bool {
    @objc get
    @objc set
  }
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class GeneralGridVC : SaavnSDK.SaavnVC_n {
  @objc @_Concurrency.MainActor(unsafe) public init?(_ data: Foundation.NSDictionary)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateUIMode()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func downloadUpdate(_ notification: Foundation.Notification!)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func nowPlayingUpdate(_ notification: Foundation.Notification!)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func forceRefresh()
  @objc deinit
}
extension SaavnSDK.GeneralGridVC : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionReusableView
}
extension SaavnSDK.GeneralGridVC : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForFooterInSection section: Swift.Int) -> CoreFoundation.CGSize
}
extension SaavnSDK.GeneralGridVC : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension SaavnSDK.GeneralGridVC {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
}
extension SaavnSDK.UserData {
  @objc dynamic public func updateJioTuneOpenTS()
  @objc dynamic public func updateJioTuneSetTS()
  @objc dynamic public func shouldHighlightVideoTab() -> ObjectiveC.ObjCBool
}
@objc public protocol EmptyStateViewDelegate {
  @objc func searchAgainTapped()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class EmptyStateView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: SaavnSDK.EmptyStateViewDelegate!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) public func setData(titleStr: Swift.String, desctiptionStr: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BaseCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class JioTuneUnavailableVC : SaavnSDK.SaavnVC_n {
  @objc @_Concurrency.MainActor(unsafe) public init(media: [Swift.String : Any], sectionData: Foundation.NSDictionary?, preloadedImage: UIKit.UIImage?, type: SaavnSDK.ModalViewType, parentVC: SaavnSDK.SaavnVC_n)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateUIMode()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
}
extension SaavnSDK.JioTuneUnavailableVC : UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func interactionControllerForDismissal(using animator: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
}
extension SaavnSDK.JioTuneUnavailableVC : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
extension SaavnSDK.JioTuneUnavailableVC {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func getScreenName() -> Swift.String!
}
extension SaavnSDK.AlamofireWrapper.RequestMethod : Swift.Equatable {}
extension SaavnSDK.AlamofireWrapper.RequestMethod : Swift.Hashable {}
extension SaavnSDK.AlamofireWrapper.RequestMethod : Swift.RawRepresentable {}
extension SaavnSDK.AlamofireWrapper.RequestParameterEncoding : Swift.Equatable {}
extension SaavnSDK.AlamofireWrapper.RequestParameterEncoding : Swift.Hashable {}
extension SaavnSDK.AlamofireWrapper.RequestParameterEncoding : Swift.RawRepresentable {}
extension SaavnSDK.AlamofireWrapper.AFReachabilityStatus : Swift.Equatable {}
extension SaavnSDK.AlamofireWrapper.AFReachabilityStatus : Swift.Hashable {}
extension SaavnSDK.AlamofireWrapper.AFReachabilityStatus : Swift.RawRepresentable {}
extension SaavnSDK.VideoData.VideoFolder : Swift.Equatable {}
extension SaavnSDK.VideoData.VideoFolder : Swift.Hashable {}
extension SaavnSDK.VideoData.VideoFolder : Swift.RawRepresentable {}
